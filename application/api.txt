package @org.osgi.annotation.bundle.Export net.corda.v5.application.crypto {

  public interface CompositeKeyGenerator {
    method @NonNull public PublicKey create(@NonNull List<CompositeKeyNodeAndWeight>, @Nullable Integer);
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface DigestService {
    method @NonNull public net.corda.v5.crypto.DigestAlgorithmName defaultDigestAlgorithm();
    method @net.corda.v5.base.annotations.Suspendable public int digestLength(@NonNull net.corda.v5.crypto.DigestAlgorithmName);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.crypto.SecureHash hash(@NonNull byte[], @NonNull net.corda.v5.crypto.DigestAlgorithmName);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.crypto.SecureHash hash(@NonNull InputStream, @NonNull net.corda.v5.crypto.DigestAlgorithmName);
    method @NonNull public net.corda.v5.crypto.SecureHash parseSecureHash(@NonNull String);
    method @NonNull public Set<DigestAlgorithmName> supportedDigestAlgorithms();
  }

  @net.corda.v5.base.annotations.CordaSerializable public final class DigitalSignatureAndMetadata {
    ctor @net.corda.v5.base.annotations.ConstructorForDeserialization public DigitalSignatureAndMetadata(@NonNull net.corda.v5.crypto.DigitalSignature.WithKeyId, @NonNull net.corda.v5.application.crypto.DigitalSignatureMetadata, @Nullable net.corda.v5.crypto.merkle.MerkleProof);
    ctor public DigitalSignatureAndMetadata(@NonNull net.corda.v5.crypto.DigitalSignature.WithKeyId, @NonNull net.corda.v5.application.crypto.DigitalSignatureMetadata);
    method public boolean equals(@Nullable Object);
    method @NonNull public net.corda.v5.crypto.SecureHash getBy();
    method @NonNull public net.corda.v5.application.crypto.DigitalSignatureMetadata getMetadata();
    method @Nullable public net.corda.v5.crypto.merkle.MerkleProof getProof();
    method @NonNull public net.corda.v5.crypto.DigitalSignature.WithKeyId getSignature();
    method public int hashCode();
    method @NonNull public String toString();
  }

  @net.corda.v5.base.annotations.CordaSerializable public final class DigitalSignatureMetadata {
    ctor public DigitalSignatureMetadata(@NonNull Instant, @NonNull net.corda.v5.crypto.SignatureSpec, @NonNull Map<String,String>);
    method public boolean equals(@Nullable Object);
    method @NonNull public Map<String,String> getProperties();
    method @NonNull public net.corda.v5.crypto.SignatureSpec getSignatureSpec();
    method @NonNull public Instant getTimestamp();
    method public int hashCode();
    method @NonNull public String toString();
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface DigitalSignatureVerificationService {
    method public void verify(@NonNull byte[], @NonNull byte[], @NonNull PublicKey, @NonNull net.corda.v5.crypto.SignatureSpec);
    method public void verify(@NonNull byte[], @NonNull net.corda.v5.crypto.DigitalSignature, @NonNull PublicKey, @NonNull net.corda.v5.crypto.SignatureSpec);
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface MerkleTreeFactory {
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.crypto.merkle.MerkleTreeHashDigest createHashDigest(@NonNull String, @NonNull net.corda.v5.crypto.DigestAlgorithmName);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.crypto.merkle.MerkleTreeHashDigest createHashDigest(@NonNull String, @NonNull net.corda.v5.crypto.DigestAlgorithmName, @NonNull Map<String,Object>);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.crypto.merkle.MerkleTree createTree(@NonNull List<byte[]>, @NonNull net.corda.v5.crypto.merkle.MerkleTreeHashDigest);
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface SignatureSpecService {
    method @NonNull @net.corda.v5.base.annotations.Suspendable public List<SignatureSpec> compatibleSignatureSpecs(@NonNull PublicKey);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public List<SignatureSpec> compatibleSignatureSpecs(@NonNull PublicKey, @NonNull net.corda.v5.crypto.DigestAlgorithmName);
    method @Nullable @net.corda.v5.base.annotations.Suspendable public net.corda.v5.crypto.SignatureSpec defaultSignatureSpec(@NonNull PublicKey);
    method @Nullable @net.corda.v5.base.annotations.Suspendable public net.corda.v5.crypto.SignatureSpec defaultSignatureSpec(@NonNull PublicKey, @NonNull net.corda.v5.crypto.DigestAlgorithmName);
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface SigningService {
    method @NonNull @net.corda.v5.base.annotations.Suspendable public Map<PublicKey,PublicKey> findMySigningKeys(@NonNull Set<PublicKey>);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.crypto.DigitalSignature.WithKeyId sign(@NonNull byte[], @NonNull PublicKey, @NonNull net.corda.v5.crypto.SignatureSpec);
  }

}

package @org.osgi.annotation.bundle.Export net.corda.v5.application.flows {

  public interface ClientRequestBody {
    method @NonNull public String getRequestBody();
    method @NonNull public <T> T getRequestBodyAs(@NonNull net.corda.v5.application.marshalling.MarshallingService, @NonNull Class<T>);
    method @NonNull public <T> List<T> getRequestBodyAsList(@NonNull net.corda.v5.application.marshalling.MarshallingService, @NonNull Class<T>);
    method @NonNull public <K, V> Map<K,V> getRequestBodyAsMap(@NonNull net.corda.v5.application.marshalling.MarshallingService, @NonNull Class<K>, @NonNull Class<V>);
  }

  public interface ClientStartableFlow extends net.corda.v5.application.flows.Flow {
    method @NonNull @net.corda.v5.base.annotations.Suspendable public String call(@NonNull net.corda.v5.application.flows.ClientRequestBody);
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) public @interface CordaInject {
  }

  public class CordaInjectJavaApiTest {
    ctor public CordaInjectJavaApiTest();
    method public void cordaInject();
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface Flow {
  }

  public interface FlowContextProperties {
    method @Nullable public String get(@NonNull String);
    method public void put(@NonNull String, @NonNull String);
    field public static final String CORDA_RESERVED_PREFIX;
  }

  public final class FlowContextPropertyKeys {
    field public static final String CPI_FILE_CHECKSUM;
    field public static final String CPI_NAME;
    field public static final String CPI_SIGNER_SUMMARY_HASH;
    field public static final String CPI_VERSION;
    field public static final String CPK_FILE_CHECKSUM;
    field public static final String INITIAL_PLATFORM_VERSION;
    field public static final String INITIAL_SOFTWARE_VERSION;
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface FlowEngine {
    method @NonNull public net.corda.v5.application.flows.FlowContextProperties getFlowContextProperties();
    method @NonNull public UUID getFlowId();
    method @NonNull public net.corda.v5.base.types.MemberX500Name getVirtualNodeName();
    method @net.corda.v5.base.annotations.Suspendable public <R> R subFlow(@NonNull net.corda.v5.application.flows.SubFlow<R>);
  }

  public class FlowEngineJavaApiTest {
    ctor public FlowEngineJavaApiTest();
    method public void getFlowId();
    method public void subFlow();
  }

  public class FlowJavaApiTest {
    ctor public FlowJavaApiTest();
    method public void callStringFlow();
    method public void callVoidFlow();
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) public @interface InitiatedBy {
    method public abstract String protocol();
    method public abstract int[] version() default {1};
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) public @interface InitiatingFlow {
    method public abstract String protocol();
    method public abstract int[] version() default {1};
  }

  public interface ResponderFlow extends net.corda.v5.application.flows.Flow {
    method @net.corda.v5.base.annotations.Suspendable public void call(@NonNull net.corda.v5.application.messaging.FlowSession);
  }

  public interface SubFlow<T> extends net.corda.v5.application.flows.Flow {
    method @net.corda.v5.base.annotations.Suspendable public T call();
  }

}

package @org.osgi.annotation.bundle.Export net.corda.v5.application.marshalling {

  @net.corda.v5.base.annotations.DoNotImplement public interface JsonMarshallingService extends net.corda.v5.application.marshalling.MarshallingService {
  }

  public class JsonMarshallingServiceJavaApiTest {
    ctor public JsonMarshallingServiceJavaApiTest();
    method public void formatJson();
    method public void parseJson();
    method public void parseJsonList();
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface MarshallingService {
    method @NonNull public String format(@NonNull Object);
    method public <T> T parse(@NonNull String, @NonNull Class<T>);
    method @NonNull public <T> List<T> parseList(@NonNull String, @NonNull Class<T>);
    method @NonNull public <K, V> Map<K,V> parseMap(@NonNull String, @NonNull Class<K>, @NonNull Class<V>);
  }

}

package @org.osgi.annotation.bundle.Export net.corda.v5.application.marshalling.json {

  public interface JsonDeserializer<T> {
    method public T deserialize(@NonNull net.corda.v5.application.marshalling.json.JsonNodeReader);
  }

  public class JsonDeserializerJavaApiTest {
    ctor public JsonDeserializerJavaApiTest();
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface JsonNodeReader {
    method @Nullable public Iterator<JsonNodeReader> asArray();
    method public boolean asBoolean();
    method public boolean asBoolean(boolean);
    method public double asDouble();
    method public double asDouble(double);
    method public int asInt();
    method public int asInt(int);
    method public long asLong();
    method public long asLong(long);
    method @NonNull public String asText();
    method @NonNull public String asText(@NonNull String);
    method @NonNull public BigDecimal bigDecimalValue();
    method @NonNull public BigInteger bigIntegerValue();
    method @Nullable public byte[] binaryValue();
    method public boolean canConvertToInt();
    method public boolean canConvertToLong();
    method public double doubleValue();
    method @Nullable public Iterator<Map.Entry<String,JsonNodeReader>> fields();
    method public float floatValue();
    method @Nullable public net.corda.v5.application.marshalling.json.JsonNodeReader getField(@NonNull String);
    method @NonNull public net.corda.v5.application.marshalling.json.JsonNodeReaderType getType();
    method public boolean hasField(@NonNull String);
    method public boolean isArray();
    method public boolean isBoolean();
    method public boolean isDouble();
    method public boolean isFloatingPointNumber();
    method public boolean isInt();
    method public boolean isNull();
    method public boolean isNumber();
    method public boolean isObject();
    method public boolean isText();
    method @Nullable public Number numberValue();
    method @Nullable public <T> T parse(@NonNull Class<T>);
    method public short shortValue();
  }

  public class JsonNodeReaderJavaApiTest {
    ctor public JsonNodeReaderJavaApiTest();
  }

  public enum JsonNodeReaderType {
    enum_constant public static final net.corda.v5.application.marshalling.json.JsonNodeReaderType ARRAY;
    enum_constant public static final net.corda.v5.application.marshalling.json.JsonNodeReaderType BOOLEAN;
    enum_constant public static final net.corda.v5.application.marshalling.json.JsonNodeReaderType NULL;
    enum_constant public static final net.corda.v5.application.marshalling.json.JsonNodeReaderType NUMBER;
    enum_constant public static final net.corda.v5.application.marshalling.json.JsonNodeReaderType OBJECT;
    enum_constant public static final net.corda.v5.application.marshalling.json.JsonNodeReaderType STRING;
  }

  public enum JsonSerializedBase64Config {
    enum_constant public static final net.corda.v5.application.marshalling.json.JsonSerializedBase64Config MIME;
    enum_constant public static final net.corda.v5.application.marshalling.json.JsonSerializedBase64Config MIME_NO_LINEFEEDS;
    enum_constant public static final net.corda.v5.application.marshalling.json.JsonSerializedBase64Config MODIFIED_FOR_URL;
    enum_constant public static final net.corda.v5.application.marshalling.json.JsonSerializedBase64Config PEM;
  }

  public interface JsonSerializer<T> {
    method public void serialize(T, @NonNull net.corda.v5.application.marshalling.json.JsonWriter);
  }

  public class JsonSerializerJavaApiTest {
    ctor public JsonSerializerJavaApiTest();
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface JsonWriter {
    method public void writeArray(@NonNull int[], int, int);
    method public void writeArray(@NonNull long[], int, int);
    method public void writeArray(@NonNull double[], int, int);
    method public void writeArray(@NonNull String[], int, int);
    method public void writeArrayFieldStart(@NonNull String);
    method public void writeBinary(@NonNull net.corda.v5.application.marshalling.json.JsonSerializedBase64Config, @NonNull byte[], int, int);
    method public void writeBinary(@NonNull net.corda.v5.application.marshalling.json.JsonSerializedBase64Config, @NonNull InputStream, int);
    method public void writeBinary(@NonNull byte[]);
    method public void writeBinary(@NonNull byte[], int, int);
    method public void writeBinary(@NonNull InputStream, int);
    method public void writeBinaryField(@NonNull String, @NonNull byte[]);
    method public void writeBoolean(boolean);
    method public void writeBooleanField(@NonNull String, boolean);
    method public void writeEndArray();
    method public void writeEndObject();
    method public void writeFieldName(@NonNull String);
    method public void writeNull();
    method public void writeNullField(@NonNull String);
    method public void writeNumber(@NonNull BigDecimal);
    method public void writeNumber(@NonNull BigInteger);
    method public void writeNumber(double);
    method public void writeNumber(float);
    method public void writeNumber(int);
    method public void writeNumber(long);
    method public void writeNumber(short);
    method public void writeNumberField(@NonNull String, @NonNull BigDecimal);
    method public void writeNumberField(@NonNull String, double);
    method public void writeNumberField(@NonNull String, float);
    method public void writeNumberField(@NonNull String, int);
    method public void writeNumberField(@NonNull String, long);
    method public void writeObject(@NonNull Object);
    method public void writeObjectField(@NonNull String, @NonNull Object);
    method public void writeObjectFieldStart(@NonNull String);
    method public void writeRaw(char);
    method public void writeRaw(@NonNull char[], int, int);
    method public void writeRaw(@NonNull String);
    method public void writeRaw(@NonNull String, int, int);
    method public void writeRawValue(@NonNull char[], int, int);
    method public void writeRawValue(@NonNull String);
    method public void writeRawValue(@NonNull String, int, int);
    method public void writeStartArray();
    method public void writeStartObject();
    method public void writeString(@NonNull char[], int, int);
    method public void writeString(@NonNull String);
    method public void writeStringField(@NonNull String, @NonNull String);
  }

  public class JsonWriterJavaApiTest {
    ctor public JsonWriterJavaApiTest();
  }

}

package @org.osgi.annotation.bundle.Export net.corda.v5.application.membership {

  @net.corda.v5.base.annotations.DoNotImplement public interface MemberLookup {
    method @Nullable @net.corda.v5.base.annotations.Suspendable public net.corda.v5.membership.MemberInfo lookup(@NonNull net.corda.v5.base.types.MemberX500Name);
    method @Nullable @net.corda.v5.base.annotations.Suspendable public net.corda.v5.membership.MemberInfo lookup(@NonNull PublicKey);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public List<MemberInfo> lookup();
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.membership.MemberInfo myInfo();
  }

  public class MemberLookupJavaApiTest {
    ctor public MemberLookupJavaApiTest();
    method public void lookupMemberInfo();
    method public void lookupMemberX500Name();
    method public void lookupPublicKey();
    method public void myInfo();
  }

}

package @org.osgi.annotation.bundle.Export net.corda.v5.application.messaging {

  public interface ExternalMessaging {
    method @net.corda.v5.base.annotations.Suspendable public void send(@NonNull String, @NonNull String);
    method @net.corda.v5.base.annotations.Suspendable public void send(@NonNull String, @NonNull String, @NonNull String);
  }

  public interface FlowContextPropertiesBuilder {
    method public void apply(@NonNull net.corda.v5.application.flows.FlowContextProperties);
  }

  @net.corda.v5.base.annotations.CordaSerializable public interface FlowInfo {
    method @NonNull public String protocol();
    method @NonNull public Integer protocolVersion();
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface FlowMessaging {
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.application.messaging.FlowSession initiateFlow(@NonNull net.corda.v5.base.types.MemberX500Name);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.application.messaging.FlowSession initiateFlow(@NonNull net.corda.v5.base.types.MemberX500Name, @NonNull net.corda.v5.application.messaging.FlowContextPropertiesBuilder);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public <R> List<R> receiveAll(@NonNull Class<? extends R>, @NonNull Set<FlowSession>);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public Map<FlowSession,?> receiveAllMap(@NonNull Map<FlowSession,Class<?>>);
    method @net.corda.v5.base.annotations.Suspendable public void sendAll(@NonNull Object, @NonNull Set<FlowSession>);
    method @net.corda.v5.base.annotations.Suspendable public void sendAllMap(@NonNull Map<FlowSession,Object>);
  }

  public class FlowMessagingFlowJavaExample implements net.corda.v5.application.flows.ClientStartableFlow {
    ctor public FlowMessagingFlowJavaExample();
    method @NonNull public String call(@NonNull net.corda.v5.application.flows.ClientRequestBody);
    field @net.corda.v5.application.flows.CordaInject public net.corda.v5.application.messaging.FlowMessaging flowMessaging;
  }

  public final class FlowMessagingFlowKotlinExample implements net.corda.v5.application.flows.ClientStartableFlow {
    ctor public FlowMessagingFlowKotlinExample();
    method @NonNull public String call(@NonNull net.corda.v5.application.flows.ClientRequestBody requestBody);
    method @NonNull public net.corda.v5.application.messaging.FlowMessaging getFlowMessaging();
    method public void setFlowMessaging(@NonNull net.corda.v5.application.messaging.FlowMessaging);
    property @NonNull public final net.corda.v5.application.messaging.FlowMessaging flowMessaging;
    field @NonNull @net.corda.v5.application.flows.CordaInject public net.corda.v5.application.messaging.FlowMessaging flowMessaging;
  }

  public class FlowMessagingJavaApiTest {
    ctor public FlowMessagingJavaApiTest();
    method public void initiateFlowParty();
    method public void initiateFlowPartyWithBuilder();
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface FlowSession {
    method @net.corda.v5.base.annotations.Suspendable public void close();
    method @NonNull public net.corda.v5.application.flows.FlowContextProperties getContextProperties();
    method @NonNull public net.corda.v5.base.types.MemberX500Name getCounterparty();
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.application.messaging.FlowInfo getCounterpartyFlowInfo();
    method @NonNull @net.corda.v5.base.annotations.Suspendable public <R> R receive(@NonNull Class<R>);
    method @net.corda.v5.base.annotations.Suspendable public void send(@NonNull Object);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public <R> R sendAndReceive(@NonNull Class<R>, @NonNull Object);
  }

  public class FlowSessionJavaApiTest {
    ctor public FlowSessionJavaApiTest();
    method public void close();
    method public void counterparty();
    method public void receive();
    method public void send();
    method public void sendAndReceive();
  }

}

package @org.osgi.annotation.bundle.Export net.corda.v5.application.persistence {

  public final class CordaPersistenceException extends net.corda.v5.base.exceptions.CordaRuntimeException {
    ctor @net.corda.v5.base.annotations.ConstructorForDeserialization public CordaPersistenceException(@NonNull String, @Nullable Throwable);
    ctor public CordaPersistenceException(@NonNull String);
  }

  @javax.persistence.Entity @javax.persistence.NamedQuery(name="find_by_name_and_age", query="SELECT d FROM Dog d WHERE d.name = :name AND d.age <= :maxAge") @javax.persistence.Table(name="DOGS") @net.corda.v5.base.annotations.CordaSerializable public final class Dog {
    ctor public Dog();
  }

  public interface PagedQuery<R> {
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.application.persistence.PagedQuery.ResultSet<R> execute();
    method @NonNull public net.corda.v5.application.persistence.PagedQuery<R> setLimit(int);
    method @NonNull public net.corda.v5.application.persistence.PagedQuery<R> setOffset(int);
  }

  public static interface PagedQuery.ResultSet<R> {
    method @NonNull public List<R> getResults();
    method public boolean hasNext();
    method @NonNull @net.corda.v5.base.annotations.Suspendable public List<R> next();
  }

  public interface ParameterizedQuery<R> extends net.corda.v5.application.persistence.PagedQuery<R> {
    method @NonNull public net.corda.v5.application.persistence.ParameterizedQuery<R> setLimit(int);
    method @NonNull public net.corda.v5.application.persistence.ParameterizedQuery<R> setOffset(int);
    method @NonNull public net.corda.v5.application.persistence.ParameterizedQuery<R> setParameter(@NonNull String, @NonNull Object);
    method @NonNull public net.corda.v5.application.persistence.ParameterizedQuery<R> setParameters(@NonNull Map<String,Object>);
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface PersistenceService {
    method @Nullable @net.corda.v5.base.annotations.Suspendable public <T> T find(@NonNull Class<T>, @NonNull Object);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public <T> List<T> find(@NonNull Class<T>, @NonNull List<?>);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public <T> net.corda.v5.application.persistence.PagedQuery<T> findAll(@NonNull Class<T>);
    method @Nullable @net.corda.v5.base.annotations.Suspendable public <T> T merge(@NonNull T);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public <T> List<T> merge(@NonNull List<T>);
    method @net.corda.v5.base.annotations.Suspendable public void persist(@NonNull Object);
    method @net.corda.v5.base.annotations.Suspendable public void persist(@NonNull List<?>);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public <T> net.corda.v5.application.persistence.ParameterizedQuery<T> query(@NonNull String, @NonNull Class<T>);
    method @net.corda.v5.base.annotations.Suspendable public void remove(@NonNull Object);
    method @net.corda.v5.base.annotations.Suspendable public void remove(@NonNull List<?>);
  }

  public final class PersistenceServiceFindAllFKotlinExampleKt {
    method public static error.NonExistentClass getPagedQuery();
    method public static error.NonExistentClass getParamQuery();
    method @NonNull public static net.corda.v5.application.persistence.PersistenceService getPersistenceService();
    method @NonNull public static java.util.List<net.corda.v5.application.persistence.Dog> getResult1();
    method @NonNull public static java.util.List<net.corda.v5.application.persistence.Dog> getResult2();
    method public static void setPersistenceService(@NonNull net.corda.v5.application.persistence.PersistenceService);
    property public static final error.NonExistentClass pagedQuery;
    property public static final error.NonExistentClass paramQuery;
    property @NonNull public static final net.corda.v5.application.persistence.PersistenceService persistenceService;
    property @NonNull public static final java.util.List<net.corda.v5.application.persistence.Dog> result1;
    property @NonNull public static final java.util.List<net.corda.v5.application.persistence.Dog> result2;
    field @NonNull @net.corda.v5.application.flows.CordaInject public static net.corda.v5.application.persistence.PersistenceService persistenceService;
  }

  public class PersistenceServiceFindAllFlowJavaExample implements net.corda.v5.application.flows.ClientStartableFlow {
    ctor public PersistenceServiceFindAllFlowJavaExample();
    method @NonNull public String call(@NonNull net.corda.v5.application.flows.ClientRequestBody);
    field @net.corda.v5.application.flows.CordaInject public net.corda.v5.application.persistence.PersistenceService persistenceService;
  }

}

package @org.osgi.annotation.bundle.Export net.corda.v5.application.serialization {

  @net.corda.v5.base.annotations.DoNotImplement public interface SerializationService {
    method @NonNull public <T> T deserialize(@NonNull net.corda.v5.serialization.SerializedBytes<T>, @NonNull Class<T>);
    method @NonNull public <T> T deserialize(@NonNull byte[], @NonNull Class<T>);
    method @NonNull public <T> net.corda.v5.serialization.SerializedBytes<T> serialize(@NonNull T);
  }

}

package @org.osgi.annotation.bundle.Export net.corda.v5.application.uniqueness.model {

  public interface UniquenessCheckError {
  }

  public interface UniquenessCheckErrorInputStateConflict extends net.corda.v5.application.uniqueness.model.UniquenessCheckError {
    method @NonNull public List<UniquenessCheckStateDetails> getConflictingStates();
  }

  public interface UniquenessCheckErrorInputStateUnknown extends net.corda.v5.application.uniqueness.model.UniquenessCheckError {
    method @NonNull public List<UniquenessCheckStateRef> getUnknownStates();
  }

  public interface UniquenessCheckErrorMalformedRequest extends net.corda.v5.application.uniqueness.model.UniquenessCheckError {
    method @NonNull public String getErrorText();
  }

  public interface UniquenessCheckErrorReferenceStateConflict extends net.corda.v5.application.uniqueness.model.UniquenessCheckError {
    method @NonNull public List<UniquenessCheckStateDetails> getConflictingStates();
  }

  public interface UniquenessCheckErrorReferenceStateUnknown extends net.corda.v5.application.uniqueness.model.UniquenessCheckError {
    method @NonNull public List<UniquenessCheckStateRef> getUnknownStates();
  }

  public interface UniquenessCheckErrorTimeWindowOutOfBounds extends net.corda.v5.application.uniqueness.model.UniquenessCheckError {
    method @NonNull public Instant getEvaluationTimestamp();
    method @Nullable public Instant getTimeWindowLowerBound();
    method @NonNull public Instant getTimeWindowUpperBound();
  }

  public interface UniquenessCheckErrorUnhandledException extends net.corda.v5.application.uniqueness.model.UniquenessCheckError {
    method @NonNull public String getUnhandledExceptionMessage();
    method @NonNull public String getUnhandledExceptionType();
  }

  public interface UniquenessCheckResult {
    method @NonNull public Instant getResultTimestamp();
  }

  public interface UniquenessCheckResultFailure extends net.corda.v5.application.uniqueness.model.UniquenessCheckResult {
    method @NonNull public net.corda.v5.application.uniqueness.model.UniquenessCheckError getError();
  }

  public interface UniquenessCheckResultSuccess extends net.corda.v5.application.uniqueness.model.UniquenessCheckResult {
  }

  @net.corda.v5.base.annotations.CordaSerializable public interface UniquenessCheckStateDetails {
    method @Nullable public net.corda.v5.crypto.SecureHash getConsumingTxId();
    method @NonNull public net.corda.v5.application.uniqueness.model.UniquenessCheckStateRef getStateRef();
  }

  @net.corda.v5.base.annotations.CordaSerializable public interface UniquenessCheckStateRef {
    method public int getStateIndex();
    method @NonNull public net.corda.v5.crypto.SecureHash getTxHash();
  }

}

