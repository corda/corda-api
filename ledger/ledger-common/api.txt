package @org.osgi.annotation.bundle.Export net.corda.v5.ledger.common {

  @net.corda.v5.base.annotations.DoNotImplement public interface NotaryLookup {
    method @NonNull @net.corda.v5.base.annotations.Suspendable public Collection<NotaryInfo> getNotaryServices();
    method @net.corda.v5.base.annotations.Suspendable public boolean isNotaryVirtualNode(@NonNull net.corda.v5.base.types.MemberX500Name);
    method @Nullable @net.corda.v5.base.annotations.Suspendable public net.corda.v5.membership.NotaryInfo lookup(@NonNull net.corda.v5.base.types.MemberX500Name);
  }

}

package @org.osgi.annotation.bundle.Export net.corda.v5.ledger.common.transaction {

  @net.corda.v5.base.annotations.DoNotImplement public interface CordaPackageSummary {
    method @NonNull public String getFileChecksum();
    method @NonNull public String getName();
    method @Nullable public String getSignerSummaryHash();
    method @NonNull public String getVersion();
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface TransactionMetadata {
    method @NonNull public Map<String,String> getDigestSettings();
    method @NonNull public String getLedgerModel();
    method public int getLedgerVersion();
    method public int getPlatformVersion();
    method @Nullable public String getTransactionSubtype();
  }

  public final class TransactionNoAvailableKeysException extends net.corda.v5.base.exceptions.CordaRuntimeException {
    ctor public TransactionNoAvailableKeysException(@NonNull String, @Nullable Throwable);
  }

  public class TransactionSignatureException extends net.corda.v5.base.exceptions.CordaRuntimeException {
    ctor public TransactionSignatureException(@NonNull net.corda.v5.crypto.SecureHash, @NonNull String, @Nullable Throwable);
    method @NonNull public net.corda.v5.crypto.SecureHash getTransactionId();
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface TransactionSignatureService {
    method @NonNull @net.corda.v5.base.annotations.Suspendable public List<DigitalSignatureAndMetadata> sign(@NonNull net.corda.v5.ledger.common.transaction.TransactionWithMetadata, @NonNull Iterable<PublicKey>);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public List<List<DigitalSignatureAndMetadata>> signBatch(@NonNull List<TransactionWithMetadata>, @NonNull Iterable<PublicKey>);
    method public void verifySignature(@NonNull net.corda.v5.ledger.common.transaction.TransactionWithMetadata, @NonNull net.corda.v5.application.crypto.DigitalSignatureAndMetadata, @NonNull PublicKey);
  }

  public final class TransactionVerificationException extends net.corda.v5.base.exceptions.CordaRuntimeException {
    ctor public TransactionVerificationException(@NonNull net.corda.v5.crypto.SecureHash, @NonNull String, @Nullable Throwable);
    method @NonNull public net.corda.v5.crypto.SecureHash getTransactionId();
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface TransactionWithMetadata {
    method @NonNull public net.corda.v5.crypto.SecureHash getId();
    method @NonNull public net.corda.v5.ledger.common.transaction.TransactionMetadata getMetadata();
  }

}

