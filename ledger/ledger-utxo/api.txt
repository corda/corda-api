package @org.osgi.annotation.bundle.Export net.corda.v5.ledger.utxo {

  @net.corda.v5.base.annotations.CordaSerializable @net.corda.v5.base.annotations.DoNotImplement public interface Attachment {
    method public void extractFile(@NonNull String, @NonNull OutputStream);
    method @NonNull public net.corda.v5.crypto.SecureHash getId();
    method @NonNull public List<PublicKey> getSignatories();
    method public int getSize();
    method @NonNull public InputStream open();
    method @NonNull public default ZipInputStream openAsZip();
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) public @interface BelongsToContract {
    method @NonNull public abstract Class<? extends Contract> value();
  }

  @net.corda.v5.base.annotations.CordaSerializable public interface Command {
  }

  public interface Contract {
    method @net.corda.v5.base.annotations.Suspendable public default boolean isVisible(@NonNull net.corda.v5.ledger.utxo.ContractState, @NonNull net.corda.v5.ledger.utxo.VisibilityChecker);
    method public void verify(@NonNull net.corda.v5.ledger.utxo.transaction.UtxoLedgerTransaction);
  }

  @net.corda.v5.base.annotations.CordaSerializable public interface ContractState {
    method @NonNull public List<PublicKey> getParticipants();
  }

  public final class ContractVerificationException extends net.corda.v5.base.exceptions.CordaRuntimeException {
    ctor public ContractVerificationException(@NonNull net.corda.v5.crypto.SecureHash, @NonNull List<ContractVerificationFailure>);
    method @NonNull public List<ContractVerificationFailure> getFailureReasons();
    method @NonNull public net.corda.v5.crypto.SecureHash getTransactionId();
  }

  @net.corda.v5.base.annotations.CordaSerializable @net.corda.v5.base.annotations.DoNotImplement public interface ContractVerificationFailure {
    method @NonNull public String getContractClassName();
    method @NonNull public List<String> getContractStateClassNames();
    method @NonNull public String getExceptionClassName();
    method @NonNull public String getExceptionMessage();
  }

  @net.corda.v5.base.annotations.CordaSerializable @net.corda.v5.base.annotations.DoNotImplement public interface EncumbranceGroup {
    method public int getSize();
    method @NonNull public String getTag();
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface FinalizationResult {
    method @NonNull public net.corda.v5.ledger.utxo.transaction.UtxoSignedTransaction getTransaction();
  }

  @net.corda.v5.base.annotations.CordaSerializable @net.corda.v5.base.annotations.DoNotImplement public interface StateAndRef<T extends net.corda.v5.ledger.utxo.ContractState> {
    method @NonNull public net.corda.v5.ledger.utxo.StateRef getRef();
    method @NonNull public net.corda.v5.ledger.utxo.TransactionState<T> getState();
  }

  @net.corda.v5.base.annotations.CordaSerializable public final class StateRef {
    ctor public StateRef(@NonNull net.corda.v5.crypto.SecureHash, int);
    method public boolean equals(@Nullable Object);
    method public int getIndex();
    method @NonNull public net.corda.v5.crypto.SecureHash getTransactionId();
    method public int hashCode();
    method public static net.corda.v5.ledger.utxo.StateRef parse(@NonNull String, net.corda.v5.application.crypto.DigestService);
    method public String toString();
  }

  public class StateRefParseTest {
    ctor public StateRefParseTest();
  }

  @net.corda.v5.base.annotations.CordaSerializable @net.corda.v5.base.annotations.DoNotImplement public interface TimeWindow {
    method public boolean contains(@NonNull Instant);
    method @Nullable public Instant getFrom();
    method @NonNull public Instant getUntil();
  }

  @net.corda.v5.base.annotations.CordaSerializable @net.corda.v5.base.annotations.DoNotImplement public interface TransactionState<T extends net.corda.v5.ledger.utxo.ContractState> {
    method @NonNull public T getContractState();
    method @NonNull public Class<T> getContractStateType();
    method @NonNull public Class<? extends Contract> getContractType();
    method @Nullable public net.corda.v5.ledger.utxo.EncumbranceGroup getEncumbranceGroup();
    method @NonNull public PublicKey getNotaryKey();
    method @NonNull public net.corda.v5.base.types.MemberX500Name getNotaryName();
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface UtxoLedgerService {
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder createTransactionBuilder();
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredTransactionBuilder filterSignedTransaction(@NonNull net.corda.v5.ledger.utxo.transaction.UtxoSignedTransaction);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.FinalizationResult finalize(@NonNull net.corda.v5.ledger.utxo.transaction.UtxoSignedTransaction, @NonNull List<FlowSession>);
    method @Nullable @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.UtxoLedgerTransaction findLedgerTransaction(@NonNull net.corda.v5.crypto.SecureHash);
    method @Nullable @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.UtxoSignedTransaction findSignedTransaction(@NonNull net.corda.v5.crypto.SecureHash);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public <T extends net.corda.v5.ledger.utxo.ContractState> List<StateAndRef<T>> findUnconsumedStatesByType(@NonNull Class<T>);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public <R> net.corda.v5.ledger.utxo.query.VaultNamedParameterizedQuery<R> query(@NonNull String, @NonNull Class<R>);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.FinalizationResult receiveFinality(@NonNull net.corda.v5.application.messaging.FlowSession, @NonNull net.corda.v5.ledger.utxo.transaction.UtxoTransactionValidator);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder receiveTransactionBuilder(@NonNull net.corda.v5.application.messaging.FlowSession);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public <T extends net.corda.v5.ledger.utxo.ContractState> List<StateAndRef<T>> resolve(@NonNull Iterable<StateRef>);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public <T extends net.corda.v5.ledger.utxo.ContractState> net.corda.v5.ledger.utxo.StateAndRef<T> resolve(@NonNull net.corda.v5.ledger.utxo.StateRef);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder sendAndReceiveTransactionBuilder(@NonNull net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder, @NonNull net.corda.v5.application.messaging.FlowSession);
    method @net.corda.v5.base.annotations.Suspendable public void sendUpdatedTransactionBuilder(@NonNull net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder, @NonNull net.corda.v5.application.messaging.FlowSession);
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface VisibilityChecker {
    method @net.corda.v5.base.annotations.Suspendable public boolean containsMySigningKeys(@NonNull Iterable<PublicKey>);
  }

}

package @org.osgi.annotation.bundle.Export net.corda.v5.ledger.utxo.observer {

  public interface UtxoLedgerTokenStateObserver<T extends net.corda.v5.ledger.utxo.ContractState> {
    method @NonNull public Class<T> getStateType();
    method @NonNull public net.corda.v5.ledger.utxo.observer.UtxoToken onCommit(@NonNull T, @NonNull net.corda.v5.application.crypto.DigestService);
  }

  public final class UtxoToken {
    ctor public UtxoToken(@NonNull net.corda.v5.ledger.utxo.observer.UtxoTokenPoolKey, @NonNull BigDecimal, @Nullable net.corda.v5.ledger.utxo.observer.UtxoTokenFilterFields);
    method public boolean equals(@Nullable Object);
    method public boolean equals(@NonNull net.corda.v5.ledger.utxo.observer.UtxoToken);
    method @NonNull public BigDecimal getAmount();
    method @Nullable public net.corda.v5.ledger.utxo.observer.UtxoTokenFilterFields getFilterFields();
    method @NonNull public net.corda.v5.ledger.utxo.observer.UtxoTokenPoolKey getPoolKey();
    method public int hashCode();
    method public String toString();
  }

  public final class UtxoTokenFilterFields {
    ctor public UtxoTokenFilterFields(@Nullable String, @Nullable net.corda.v5.crypto.SecureHash);
    ctor public UtxoTokenFilterFields();
    method public boolean equals(@Nullable Object);
    method public boolean equals(@NonNull net.corda.v5.ledger.utxo.observer.UtxoTokenFilterFields);
    method @Nullable public net.corda.v5.crypto.SecureHash getOwnerHash();
    method @Nullable public String getTag();
    method public int hashCode();
    method public String toString();
  }

  public final class UtxoTokenPoolKey {
    ctor public UtxoTokenPoolKey(@Nullable String, @NonNull net.corda.v5.crypto.SecureHash, @NonNull String);
    ctor public UtxoTokenPoolKey(@NonNull net.corda.v5.crypto.SecureHash, @NonNull String);
    method public boolean equals(Object);
    method public boolean equals(@NonNull net.corda.v5.ledger.utxo.observer.UtxoTokenPoolKey);
    method @NonNull public net.corda.v5.crypto.SecureHash getIssuerHash();
    method @NonNull public String getSymbol();
    method @Nullable public String getTokenType();
    method public int hashCode();
    method public String toString();
  }

}

package @org.osgi.annotation.bundle.Export net.corda.v5.ledger.utxo.query {

  public interface VaultNamedParameterizedQuery<R> extends net.corda.v5.application.persistence.ParameterizedQuery<R> {
    method @NonNull public net.corda.v5.ledger.utxo.query.VaultNamedParameterizedQuery<R> setCreatedTimestampLimit(@NonNull Instant);
    method @NonNull public net.corda.v5.ledger.utxo.query.VaultNamedParameterizedQuery<R> setLimit(int);
    method @NonNull public net.corda.v5.ledger.utxo.query.VaultNamedParameterizedQuery<R> setOffset(int);
    method @NonNull public net.corda.v5.ledger.utxo.query.VaultNamedParameterizedQuery<R> setParameter(@NonNull String, @NonNull Object);
    method @NonNull public net.corda.v5.ledger.utxo.query.VaultNamedParameterizedQuery<R> setParameters(@NonNull Map<String,Object>);
  }

  public interface VaultNamedQueryCollector<R, T> {
    method @NonNull public net.corda.v5.ledger.utxo.query.VaultNamedQueryCollector.Result<T> collect(@NonNull List<R>, @NonNull Map<String,Object>);
  }

  public static class VaultNamedQueryCollector.Result<T> {
    ctor public VaultNamedQueryCollector.Result(@NonNull List<T>, @NonNull Boolean);
    method @NonNull public Boolean getDone();
    method @NonNull public List<T> getResults();
  }

  public interface VaultNamedQueryFactory {
    method public void create(@NonNull net.corda.v5.ledger.utxo.query.registration.VaultNamedQueryBuilderFactory);
  }

  public interface VaultNamedQueryFilter<T> {
    method @NonNull public Boolean filter(@NonNull T, @NonNull Map<String,Object>);
  }

  public interface VaultNamedQueryStateAndRefFilter<T extends net.corda.v5.ledger.utxo.ContractState> extends net.corda.v5.ledger.utxo.query.VaultNamedQueryFilter<net.corda.v5.ledger.utxo.StateAndRef<T>> {
  }

  public interface VaultNamedQueryStateAndRefTransformer<T extends net.corda.v5.ledger.utxo.ContractState, R> extends net.corda.v5.ledger.utxo.query.VaultNamedQueryTransformer<net.corda.v5.ledger.utxo.StateAndRef<T>,R> {
  }

  public interface VaultNamedQueryTransformer<T, R> {
    method @NonNull public R transform(@NonNull T, @NonNull Map<String,Object>);
  }

}

package @org.osgi.annotation.bundle.Export net.corda.v5.ledger.utxo.query.json {

  public interface ContractStateVaultJsonFactory<T extends net.corda.v5.ledger.utxo.ContractState> {
    method @NonNull public String create(@NonNull T, @NonNull net.corda.v5.application.marshalling.JsonMarshallingService);
    method @NonNull public Class<T> getStateType();
  }

}

package @org.osgi.annotation.bundle.Export net.corda.v5.ledger.utxo.query.registration {

  public interface VaultNamedQueryBuilder extends net.corda.v5.ledger.utxo.query.registration.VaultNamedQueryBuilderBase {
    method @NonNull public net.corda.v5.ledger.utxo.query.registration.VaultNamedQueryBuilderCollected collect(@NonNull net.corda.v5.ledger.utxo.query.VaultNamedQueryCollector<?,?>);
    method @NonNull public net.corda.v5.ledger.utxo.query.registration.VaultNamedQueryBuilder filter(@NonNull net.corda.v5.ledger.utxo.query.VaultNamedQueryFilter<?>);
    method @NonNull public net.corda.v5.ledger.utxo.query.registration.VaultNamedQueryBuilder map(@NonNull net.corda.v5.ledger.utxo.query.VaultNamedQueryTransformer<?,?>);
    method @NonNull public net.corda.v5.ledger.utxo.query.registration.VaultNamedQueryBuilder whereJson(@NonNull String);
  }

  public interface VaultNamedQueryBuilderBase {
    method public void register();
  }

  public interface VaultNamedQueryBuilderCollected extends net.corda.v5.ledger.utxo.query.registration.VaultNamedQueryBuilderBase {
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface VaultNamedQueryBuilderFactory {
    method @NonNull public net.corda.v5.ledger.utxo.query.registration.VaultNamedQueryBuilder create(@NonNull String);
  }

}

package @org.osgi.annotation.bundle.Export net.corda.v5.ledger.utxo.token.selection {

  @net.corda.v5.base.annotations.DoNotImplement public interface ClaimedToken {
    method @NonNull public BigDecimal getAmount();
    method @NonNull public net.corda.v5.crypto.SecureHash getIssuerHash();
    method @NonNull public net.corda.v5.base.types.MemberX500Name getNotaryX500Name();
    method @Nullable public net.corda.v5.crypto.SecureHash getOwnerHash();
    method @NonNull public net.corda.v5.ledger.utxo.StateRef getStateRef();
    method @NonNull public String getSymbol();
    method @Nullable public String getTag();
    method @NonNull public String getTokenType();
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface TokenBalance {
    method @NonNull public BigDecimal getAvailableBalance();
    method @NonNull public BigDecimal getTotalBalance();
  }

  public final class TokenBalanceCriteria {
    ctor public TokenBalanceCriteria(@NonNull String, @NonNull net.corda.v5.crypto.SecureHash, @NonNull net.corda.v5.base.types.MemberX500Name, @NonNull String);
    method public boolean equals(@Nullable Object);
    method public boolean equals(@NonNull net.corda.v5.ledger.utxo.token.selection.TokenBalanceCriteria);
    method @NonNull public net.corda.v5.crypto.SecureHash getIssuerHash();
    method @NonNull public net.corda.v5.base.types.MemberX500Name getNotaryX500Name();
    method @Nullable public net.corda.v5.crypto.SecureHash getOwnerHash();
    method @NonNull public String getSymbol();
    method @Nullable public String getTagRegex();
    method @NonNull public String getTokenType();
    method public int hashCode();
    method public void setOwnerHash(@Nullable net.corda.v5.crypto.SecureHash);
    method public void setTagRegex(@Nullable String);
    method public String toString();
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface TokenClaim {
    method @NonNull public List<ClaimedToken> getClaimedTokens();
    method @net.corda.v5.base.annotations.Suspendable public void useAndRelease(@NonNull List<StateRef>);
  }

  public final class TokenClaimCriteria {
    ctor public TokenClaimCriteria(@NonNull String, @NonNull net.corda.v5.crypto.SecureHash, @NonNull net.corda.v5.base.types.MemberX500Name, @NonNull String, @NonNull BigDecimal);
    method public boolean equals(@Nullable Object);
    method public boolean equals(@NonNull net.corda.v5.ledger.utxo.token.selection.TokenClaimCriteria);
    method @NonNull public net.corda.v5.crypto.SecureHash getIssuerHash();
    method @NonNull public net.corda.v5.base.types.MemberX500Name getNotaryX500Name();
    method @Nullable public net.corda.v5.crypto.SecureHash getOwnerHash();
    method @NonNull public String getSymbol();
    method @Nullable public String getTagRegex();
    method @NonNull public BigDecimal getTargetAmount();
    method @NonNull public String getTokenType();
    method public int hashCode();
    method public void setOwnerHash(@Nullable net.corda.v5.crypto.SecureHash);
    method public void setTagRegex(@Nullable String);
    method public String toString();
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface TokenSelection {
    method @Nullable @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.token.selection.TokenBalance queryBalance(@NonNull net.corda.v5.ledger.utxo.token.selection.TokenBalanceCriteria);
    method @Nullable @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.token.selection.TokenClaim tryClaim(@NonNull net.corda.v5.ledger.utxo.token.selection.TokenClaimCriteria);
  }

}

package @org.osgi.annotation.bundle.Export net.corda.v5.ledger.utxo.transaction {

  @net.corda.v5.base.annotations.DoNotImplement public interface UtxoLedgerTransaction {
    method @NonNull public net.corda.v5.ledger.utxo.Attachment getAttachment(@NonNull net.corda.v5.crypto.SecureHash);
    method @NonNull public List<Attachment> getAttachments();
    method @NonNull public List<Command> getCommands();
    method @NonNull public <T extends net.corda.v5.ledger.utxo.Command> List<T> getCommands(@NonNull Class<T>);
    method @NonNull public net.corda.v5.crypto.SecureHash getId();
    method @NonNull public default List<ContractState> getInputContractStates();
    method @NonNull public List<StateAndRef<?>> getInputStateAndRefs();
    method @NonNull public <T extends net.corda.v5.ledger.utxo.ContractState> List<StateAndRef<T>> getInputStateAndRefs(@NonNull Class<T>);
    method @NonNull public List<StateRef> getInputStateRefs();
    method @NonNull public <T extends net.corda.v5.ledger.utxo.ContractState> List<T> getInputStates(@NonNull Class<T>);
    method @NonNull public default List<TransactionState<?>> getInputTransactionStates();
    method @NonNull public net.corda.v5.ledger.common.transaction.TransactionMetadata getMetadata();
    method @NonNull public PublicKey getNotaryKey();
    method @NonNull public net.corda.v5.base.types.MemberX500Name getNotaryName();
    method @NonNull public default List<ContractState> getOutputContractStates();
    method @NonNull public List<StateAndRef<?>> getOutputStateAndRefs();
    method @NonNull public <T extends net.corda.v5.ledger.utxo.ContractState> List<StateAndRef<T>> getOutputStateAndRefs(@NonNull Class<T>);
    method @NonNull public <T extends net.corda.v5.ledger.utxo.ContractState> List<T> getOutputStates(@NonNull Class<T>);
    method @NonNull public default List<TransactionState<?>> getOutputTransactionStates();
    method @NonNull public default List<ContractState> getReferenceContractStates();
    method @NonNull public List<StateAndRef<?>> getReferenceStateAndRefs();
    method @NonNull public <T extends net.corda.v5.ledger.utxo.ContractState> List<StateAndRef<T>> getReferenceStateAndRefs(@NonNull Class<T>);
    method @NonNull public List<StateRef> getReferenceStateRefs();
    method @NonNull public <T extends net.corda.v5.ledger.utxo.ContractState> List<T> getReferenceStates(@NonNull Class<T>);
    method @NonNull public default List<TransactionState<?>> getReferenceTransactionStates();
    method @NonNull public List<PublicKey> getSignatories();
    method @NonNull public net.corda.v5.ledger.utxo.TimeWindow getTimeWindow();
  }

  @net.corda.v5.base.annotations.CordaSerializable @net.corda.v5.base.annotations.DoNotImplement public interface UtxoSignedTransaction extends net.corda.v5.ledger.common.transaction.TransactionWithMetadata {
    method @NonNull public List<Command> getCommands();
    method @NonNull public List<StateRef> getInputStateRefs();
    method @NonNull public PublicKey getNotaryKey();
    method @NonNull public net.corda.v5.base.types.MemberX500Name getNotaryName();
    method @NonNull public List<StateAndRef<?>> getOutputStateAndRefs();
    method @NonNull public List<StateRef> getReferenceStateRefs();
    method @NonNull public List<PublicKey> getSignatories();
    method @NonNull public List<DigitalSignatureAndMetadata> getSignatures();
    method @NonNull public net.corda.v5.ledger.utxo.TimeWindow getTimeWindow();
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.UtxoLedgerTransaction toLedgerTransaction();
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface UtxoTransactionBuilder {
    method @NonNull public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder addAttachment(@NonNull net.corda.v5.crypto.SecureHash);
    method @NonNull public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder addCommand(@NonNull net.corda.v5.ledger.utxo.Command);
    method @NonNull public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder addEncumberedOutputStates(@NonNull String, @NonNull Iterable<ContractState>);
    method @NonNull public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder addEncumberedOutputStates(@NonNull String, @NonNull net.corda.v5.ledger.utxo.ContractState...);
    method @NonNull public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder addInputState(@NonNull net.corda.v5.ledger.utxo.StateRef);
    method @NonNull public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder addInputStates(@NonNull Iterable<StateRef>);
    method @NonNull public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder addInputStates(@NonNull net.corda.v5.ledger.utxo.StateRef...);
    method @NonNull public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder addOutputState(@NonNull net.corda.v5.ledger.utxo.ContractState);
    method @NonNull public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder addOutputStates(@NonNull Iterable<ContractState>);
    method @NonNull public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder addOutputStates(@NonNull net.corda.v5.ledger.utxo.ContractState...);
    method @NonNull public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder addReferenceState(@NonNull net.corda.v5.ledger.utxo.StateRef);
    method @NonNull public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder addReferenceStates(@NonNull Iterable<StateRef>);
    method @NonNull public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder addReferenceStates(@NonNull net.corda.v5.ledger.utxo.StateRef...);
    method @NonNull public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder addSignatories(@NonNull Iterable<PublicKey>);
    method @NonNull public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder addSignatories(@NonNull PublicKey...);
    method @NonNull public List<ContractState> getEncumbranceGroup(@NonNull String);
    method @NonNull public Map<String,List<ContractState>> getEncumbranceGroups();
    method @Nullable public PublicKey getNotaryKey();
    method @Nullable public net.corda.v5.base.types.MemberX500Name getNotaryName();
    method @NonNull public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder setNotary(@NonNull net.corda.v5.base.types.MemberX500Name);
    method @NonNull public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder setTimeWindowBetween(@NonNull Instant, @NonNull Instant);
    method @NonNull public net.corda.v5.ledger.utxo.transaction.UtxoTransactionBuilder setTimeWindowUntil(@NonNull Instant);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.UtxoSignedTransaction toSignedTransaction();
  }

  public interface UtxoTransactionValidator {
    method @net.corda.v5.base.annotations.Suspendable public void checkTransaction(@NonNull net.corda.v5.ledger.utxo.transaction.UtxoLedgerTransaction);
  }

}

package @org.osgi.annotation.bundle.Export net.corda.v5.ledger.utxo.transaction.filtered {

  public final class FilteredDataInconsistencyException extends net.corda.v5.base.exceptions.CordaRuntimeException {
    ctor public FilteredDataInconsistencyException(@NonNull String);
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface UtxoFilteredData<T> {
  }

  @net.corda.v5.base.annotations.DoNotImplement public static interface UtxoFilteredData.Audit<T> extends net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredData<T> {
    method public int getSize();
    method @NonNull public Map<Integer,T> getValues();
  }

  @net.corda.v5.base.annotations.DoNotImplement public static interface UtxoFilteredData.Removed<T> extends net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredData<T> {
  }

  @net.corda.v5.base.annotations.DoNotImplement public static interface UtxoFilteredData.SizeOnly<T> extends net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredData<T> {
    method public int getSize();
  }

  @net.corda.v5.base.annotations.CordaSerializable @net.corda.v5.base.annotations.DoNotImplement public interface UtxoFilteredTransaction {
    method @NonNull public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredData<net.corda.v5.ledger.utxo.Command> getCommands();
    method @NonNull public net.corda.v5.crypto.SecureHash getId();
    method @NonNull public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredData<net.corda.v5.ledger.utxo.StateRef> getInputStateRefs();
    method @NonNull public net.corda.v5.ledger.common.transaction.TransactionMetadata getMetadata();
    method public PublicKey getNotaryKey();
    method @Nullable public net.corda.v5.base.types.MemberX500Name getNotaryName();
    method @NonNull public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredData<net.corda.v5.ledger.utxo.StateAndRef<?>> getOutputStateAndRefs();
    method @NonNull public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredData<net.corda.v5.ledger.utxo.StateRef> getReferenceStateRefs();
    method @NonNull public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredData<PublicKey> getSignatories();
    method @Nullable public net.corda.v5.ledger.utxo.TimeWindow getTimeWindow();
    method public void verify();
  }

  @net.corda.v5.base.annotations.DoNotImplement public interface UtxoFilteredTransactionBuilder {
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredTransaction build();
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredTransactionBuilder withCommands();
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredTransactionBuilder withCommands(@NonNull Predicate<Command>);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredTransactionBuilder withCommandsSize();
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredTransactionBuilder withInputStates();
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredTransactionBuilder withInputStates(@NonNull Predicate<StateRef>);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredTransactionBuilder withInputStatesSize();
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredTransactionBuilder withNotary();
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredTransactionBuilder withOutputStates();
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredTransactionBuilder withOutputStates(@NonNull Predicate<ContractState>);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredTransactionBuilder withOutputStatesSize();
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredTransactionBuilder withReferenceStates();
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredTransactionBuilder withReferenceStates(@NonNull Predicate<StateRef>);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredTransactionBuilder withReferenceStatesSize();
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredTransactionBuilder withSignatories();
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredTransactionBuilder withSignatories(@NonNull Predicate<PublicKey>);
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredTransactionBuilder withSignatoriesSize();
    method @NonNull @net.corda.v5.base.annotations.Suspendable public net.corda.v5.ledger.utxo.transaction.filtered.UtxoFilteredTransactionBuilder withTimeWindow();
  }

}

package @org.osgi.annotation.bundle.Export net.corda.v5.ledger.utxo.uniqueness.client {

  @net.corda.v5.base.annotations.DoNotImplement public interface LedgerUniquenessCheckerClientService {
    method @net.corda.v5.base.annotations.Suspendable public net.corda.v5.application.uniqueness.model.UniquenessCheckResult requestUniquenessCheck(@NonNull String, @NonNull String, @NonNull List<String>, @NonNull List<String>, int, @Nullable Instant, @NonNull Instant);
  }

}

