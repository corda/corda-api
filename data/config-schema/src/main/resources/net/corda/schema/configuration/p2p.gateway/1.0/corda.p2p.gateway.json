{
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "$id": "https://corda.r3.com/net/corda/schema/configuration/p2p/1.0/corda.p2p.gateway.json",
  "title": "Corda P2P Gateway Configuration Schema",
  "description": "Configuration schema for the P2P gateway.",
  "type": "object",
  "properties": {
    "serversConfiguration": {
      "type": "array",
      "minItems": 1,
      "description": "A list of HTTP servers that Corda listens to. The list is specified as an array of hostAddress, hostPort, and urlPath values.",
      "default": [{
        "hostAddress": "0.0.0.0",
        "hostPort": 8080,
        "urlPath": "/"
      }],
      "items": {
        "type":"object",
        "description": "An HTTP server details.",
        "properties": {
          "hostAddress": {
            "description": "The hostname or IP address where the HTTP server will bind.",
            "type": "string",
            "format": "hostname",
            "default": "0.0.0.0"
          },
          "hostPort": {
            "description": "The HTTP port of the server.",
            "type": "integer",
            "default": 8080,
            "minimum": 0,
            "maximum": 65535
          },
          "urlPath": {
            "description": "The URL path the gateway server will listen on.",
            "type": "string",
            "default": "/",
            "pattern": "^\\/[\\/.a-zA-Z0-9-]*$"
          }
        }
      }
    },
    "sslConfig": {
      "description": "Settings for TLS connections between gateways.",
      "type": "object",
      "default": {},
      "properties": {
        "revocationCheck": {
          "type": "object",
          "default": {},
          "description": "The type of revocation check for the TLS certificate.",
          "properties": {
            "mode": {
              "oneOf": [
                {"const": "SOFT_FAIL", "title": "The revocation check succeeds if the revocation status cannot be determined under certain circumstances. See java.security.cert.PKIXRevocationChecker.Option.SOFT_FAIL Javadoc for more details."},
                {"const": "HARD_FAIL", "title": "The opposite of SOFT_FAIL. This is the most rigorous check. Amongst other requirements, this check requires that the CRL checking URL is available on every level of certificate chain."},
                {"const": "OFF", "title": "Disables the CRL check."}
              ],
              "default": "SOFT_FAIL"
            }
          }
        },
        "tlsType": {
          "description": "The type of TLS connections to establish between the gateways in the cluster and gateways in other clusters. This setting MUST be the same on all gateways that communicate via HTTPS.",
          "oneOf": [
            {"const": "ONE_WAY", "title": "Establishes a regular TLS connection, where the server gateway is authenticated."},
            {"const": "MUTUAL", "title": "Establishes a mutual TLS connection, where both the server and client gateway are authenticated."}
          ],
          "default": "ONE_WAY"
        },
        "additionalProperties": false
      }
    },
    "maxRequestSize": {
      "description": "The maximum request size, in bytes, accepted by the gateway. The gateway rejects requests larger than the specified size.",
      "type": "number",
      "default": 5e8,
      "minimum": 1e7
    },
    "connectionConfig": {
      "description": "Settings for the TCP connection pool to peer gateways.",
      "type": "object",
      "default": {},
      "properties": {
        "maxClientConnections": {
          "description": "The maximum size of the connection pool.",
          "type": "integer",
          "default": 100,
          "minimum": 1,
          "maximum": 10000
        },
        "acquireTimeout": {
          "description": "The time, in seconds, after which a connection request fails.",
          "type": "integer",
          "default": 10,
          "minimum": 1,
          "maximum": 3000
        },
        "connectionIdleTimeout": {
          "description": "The time, in seconds, after which an inactive connection in the pool will be released (closed).",
          "type": "integer",
          "default": 60,
          "minimum": 1,
          "maximum": 3000
        },
        "responseTimeout": {
          "description": "The time, in milliseconds, after which the delivery of a message is considered failed.",
          "type": "integer",
          "default": 3000,
          "minimum": 100,
          "maximum": 10000
        },
        "retryDelay": {
          "description": "The time, in milliseconds, after which a message that previously failed is retried.",
          "type": "integer",
          "default": 2000,
          "minimum": 100,
          "maximum": 10000
        },
        "initialReconnectionDelay": {
          "description": "The initial time, in seconds, to wait before trying to reconnect.",
          "type": "integer",
          "default": 1,
          "minimum": 1,
          "maximum": 3000
        },
        "maxReconnectionDelay": {
          "description": "The maximum time, in seconds, to delay before trying to reconnect.",
          "type": "integer",
          "default": 16,
          "minimum": 1,
          "maximum": 3000
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": false
}
