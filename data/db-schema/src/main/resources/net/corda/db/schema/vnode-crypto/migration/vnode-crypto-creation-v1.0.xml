<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.3.xsd">
    <!--
    For now, the crypto_signing_key table schema must be identical between here and the 
    cluster schema (in ../../crypto/migration/crypto-creation-v1.0.xml)
    since the crypto processor uses the same code irrespective of where the table resides.
    
    We could just include the same changeset files in both cases, but that might confuse readers
    and liquibase, so instead we have to keep the content in sync.  
    -->
    <changeSet author="R3.Corda" id="vnode-crypto-creation-v1.0">
        <createTable tableName="crypto_wrapping_key">
            <column name="id" type="UUID">
                <constraints nullable="false"/>>
            </column>
            <column name="alias" type="VARCHAR(64)">
                <constraints nullable="false"/>
            </column>
            <!-- generation of the wrapping key; higher generation numbers to be used to replaced expiring wrapping keys -->
            <column name="generation" type="INT">
                <constraints nullable="false"/>
            </column>
            <column name="created" type="TIMESTAMP" defaultValueComputed="CURRENT_TIMESTAMP">
                <constraints nullable="false"/>
            </column>
            <column name="encoding_version" type="INT">
                <constraints nullable="false"/>
            </column>
            <column name="algorithm_name" type="VARCHAR(64)">
                <constraints nullable="false"/>
            </column>
            <column name="key_material" type="VARBINARY(1048576)">
                <constraints nullable="false"/>
            </column>
            <column name="rotation_date" type="TIMESTAMP">
                <constraints nullable="false"/>
            </column>
            <!-- If true, the parent key is a wrapping key in this table, and 
               parent_key_reference is the id of that wrapping key. If false, the parent_key
               is a corda config path. -->
            <column name="is_parent_key_managed" type="BOOLEAN">
                <constraints nullable="false"/>
            </column>
            <!-- the identity of the key used for key_material; may reference a root wrapping key outside the database, 
                 so there is no foreign key constraint -->
            <column name="parent_key_reference" type="VARCHAR(256)">
                <constraints nullable="false"/>
            </column>
        </createTable>
        <addPrimaryKey  columnNames="id"
                        tableName="crypto_wrapping_key"
                        constraintName="crypto_wrapping_key_pk"/>
        <addUniqueConstraint columnNames="alias, generation"
                             tableName="crypto_wrapping_key"
                             constraintName="alias_and_generation_are_unique"/>
        <!-- TODO FK constraint back to crypto_wrapping_key on parent_key_reference when is_parentkey_managed=true, if possible
             (or remodel so we can) -->
        <createTable tableName="crypto_hsm_association">
            <column name="id" type="VARCHAR(36)">
                <constraints nullable="false"/>
            </column>
            <column name="tenant_id" type="VARCHAR(12)">
                <constraints nullable="false"/>
            </column>
            <column name="hsm_id" type="VARCHAR(36)">
                <constraints nullable="false"/>
            </column>
            <column name="timestamp" type="TIMESTAMP">
                <constraints nullable="false"/>
            </column>
            <column name="master_key_alias" type="VARCHAR(30)">
                <constraints nullable="true"/>
            </column>
        </createTable>
        <addPrimaryKey  columnNames="id"
                        tableName="crypto_hsm_association"
                        constraintName="crypto_hsm_association_pk"/>
        <addUniqueConstraint columnNames="tenant_id, hsm_id"
                             tableName="crypto_hsm_association"
                             constraintName="crypto_hsm_association_uc"/>

        <createTable tableName="crypto_hsm_category_association">
            <column name="id" type="VARCHAR(36)">
                <constraints nullable="false"/>
            </column>
            <column name="tenant_id" type="VARCHAR(12)">
                <constraints nullable="false"/>
            </column>
            <column name="category" type="VARCHAR(20)">
                <constraints nullable="false"/>
            </column>
            <column name="hsm_association_id" type="VARCHAR(36)">
                <constraints nullable="false"/>
            </column>
            <column name="timestamp" type="TIMESTAMP">
                <constraints nullable="false"/>
            </column>
            <column name="deprecated_at" type="BIGINT">
                <constraints nullable="false"/>
            </column>
        </createTable>
        <addPrimaryKey  columnNames="id"
                        tableName="crypto_hsm_category_association"
                        constraintName="crypto_hsm_category_association_pk"/>
        <addUniqueConstraint columnNames="tenant_id, category, deprecated_at"
                             tableName="crypto_hsm_category_association"
                             constraintName="crypto_hsm_category_association_uc"/>
        <addForeignKeyConstraint  baseColumnNames="hsm_association_id"
                                  baseTableName="crypto_hsm_category_association"
                                  referencedColumnNames="id"
                                  referencedTableName="crypto_hsm_association"
                                  constraintName="crypto_hsm_category_association_fk1"/>
        <!--
        For now, the crypto_signing_key table schema must be identical between here and the 
        virtual node schema (in ../../crypto/migration/crypto-creation-v1.0.xml)
        since the crypto processor uses the same code irrespective of where the table resides.
       
        We could just include the same changeset files in both cases, but that might confuse readers
        and liquibase, so instead we have to keep the content in sync.  
        -->
        <createTable tableName="crypto_signing_key">
            <column name="id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="tenant_id" type="VARCHAR(12)">
                <constraints nullable="false"/>
            </column>
            <!-- short hash (first 12 hex chars of SHA256) of the public key -->
            <column name="key_id" type="CHAR(12)">
                <constraints nullable="false"/>
            </column>
            <!-- full SHA256hash of the public key -->
            <column name="full_key_id" type="VARCHAR(255)">
                <constraints nullable="false"/>
            </column>
            <column name="created" type="TIMESTAMP" defaultValueComputed="CURRENT_TIMESTAMP">
                <constraints nullable="false"/>
            </column>
            <column name="category" type="VARCHAR(64)">
                <constraints nullable="false"/>
            </column>
            <column name="scheme_code_name" type="VARCHAR(64)">
                <constraints nullable="false"/>
            </column>
            <column name="public_key" type="VARBINARY(1048576)">
                <constraints nullable="false"/>
            </column>
            <column name="encoding_version" type="INT">
                <constraints nullable="true"/>
            </column>
            <column name="alias" type="VARCHAR(64)">
                <constraints nullable="true"/>
            </column>
            <column name="hsm_alias" type="VARCHAR(64)">
                <constraints nullable="true"/>
            </column>
            <column name="external_id" type="VARCHAR(64)">
                <constraints nullable="true"/>
            </column>
            <column name="hsm_id" type="VARCHAR(36)">
                <constraints nullable="false"/>
            </column>
            <column name="status" type="VARCHAR(16)">
                <constraints nullable="false"/>
            </column>
        </createTable>
        <addPrimaryKey constraintName="crypto_signing_key_pk"
                       tableName="crypto_signing_key"
                       columnNames="id"/>
        <addUniqueConstraint constraintName="crypto_signing_key_unique"
                             tableName="crypto_signing_key"
                             columnNames="tenant_id"/>
        <createIndex indexName="crypto_signing_key_full_key_idx"
                     tableName="crypto_signing_key">
            <column name="tenant_id"/>
            <column name="full_key_id"/>
        </createIndex>
        <createIndex indexName="crypto_signing_key_tenant_idx"
                     tableName="crypto_signing_key">
            <column name="tenant_id"/>
        </createIndex>
        <createIndex indexName="crypto_signing_key_tenant_category_idx"
                     tableName="crypto_signing_key">
            <column name="tenant_id"/>
            <column name="category"/>
        </createIndex>
        <createIndex indexName="crypto_signing_key_tenant_alias_idx"
                     tableName="crypto_signing_key">
            <column name="tenant_id"/>
            <column name="alias"/>
        </createIndex>
        <createTable tableName="crypto_signing_key_material">
            <column name="wrapping_key_id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="signing_key_id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="signing_key_material" type="VARBINARY(1048576)">
                <constraints nullable="false"/>
            </column>
            <!-- when the key material was generated -->
            <column name="created" type="TIMESTAMP" defaultValueComputed="CURRENT_TIMESTAMP">
                <constraints nullable="false"/>
            </column>
        </createTable>
        <addPrimaryKey constraintName="crypto_signing_key_material_pk"
                       tableName="crypto_signing_key_material"
                       columnNames="signing_key_id, wrapping_key_id"/>
        <!-- TODO FK constraint to crypto_wrapping_key on (wrapping_key_alias, wrapping_key_generation) -->
        <!-- TODO FK constraint to crypto_signing_key on (signing_key_alias, signing_key_generation) -->
    </changeSet>
</databaseChangeLog>