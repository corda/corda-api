{
  "type": "record",
  "name": "SessionEvent",
  "namespace": "net.corda.data.flow.event",
  "doc": "Events sent to counterparties as part of a session",
  "fields": [
    {
      "name": "messageDirection",
      "doc": "INBOUND for messages originating from a counterparty. OUTBOUND for messages to be sent to a counterparty.",
      "type": {
        "name": "MessageDirection",
        "type": "enum",
        "symbols": [
          "INBOUND",
          "OUTBOUND"
        ]
      }
    },
    {
      "name": "timestamp",
      "type": {
        "type": "long",
        "logicalType": "timestamp-millis"
      },
      "doc": "Time ([Instant]) in milliseconds when the session event was created"
    },
    {
      "name": "sessionId",
      "type": "string",
      "doc": "UUID for the session. The initiated party sessionID will have a suffix of `-INITIATED`"
    },
    {
      "name": "sequenceNum",
      "type": [
        "null",
        "int"
      ],
      "doc": "Unique id for a message sent to a party. sequenceNum is not bidirectional. Each party will track outbound/inbound sequence numbers separately."
    },
    {
      "name": "initiatingIdentity",
      "type": "net.corda.data.identity.HoldingIdentity",
      "doc": "Identity of party who started a session."
    },
    {
      "name": "initiatedIdentity",
      "type": "net.corda.data.identity.HoldingIdentity",
      "doc": "Identity of party in the session who was initiated."
    },
    {
      "name": "receivedSequenceNum",
      "type": "int",
      "doc": "Sequence number of the last contiguous message received from a counterparty. 0 if no messages received."
    },
    {
      "name": "outOfOrderSequenceNums",
      "type": {
        "type": "array",
        "items": "int"
      },
      "doc": "The sequence numbers of events received with a value greater than the last contiguous event received. i.e out of order messages received with a value greater than the receivedSequenceNum."
    },
    {
      "name": "payload",
      "type": [
        "net.corda.data.flow.event.session.SessionInit",
        "net.corda.data.flow.event.session.SessionData",
        "net.corda.data.flow.event.session.SessionClose",
        "net.corda.data.flow.event.session.SessionAck",
        "net.corda.data.flow.event.session.SessionError"
      ]
    }
  ]
}
